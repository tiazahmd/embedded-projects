
CW_7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000009bc  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000b44  08000b44  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000b44  08000b44  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08000b44  08000b44  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000b44  08000b44  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000b44  08000b44  00010b44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000b48  08000b48  00010b48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08000b4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  08000b58  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  08000b58  0002002c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000031ce  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000b46  00000000  00000000  0002320a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000388  00000000  00000000  00023d50  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000310  00000000  00000000  000240d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001ebf5  00000000  00000000  000243e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000036ef  00000000  00000000  00042fdd  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000bb939  00000000  00000000  000466cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00102005  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000c3c  00000000  00000000  00102080  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000b2c 	.word	0x08000b2c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08000b2c 	.word	0x08000b2c

080001c8 <main>:
void StartSOS(void);
void BlinkShort(void);
void BlinkLong(void);

int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
	HAL_Init();
 80001cc:	f000 f944 	bl	8000458 <HAL_Init>
	InitGPIO();
 80001d0:	f000 f810 	bl	80001f4 <InitGPIO>

	while (1)
	{
		HAL_Delay(30);			// Let switch stabilize
 80001d4:	201e      	movs	r0, #30
 80001d6:	f000 f9b1 	bl	800053c <HAL_Delay>
		if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)) {
 80001da:	2101      	movs	r1, #1
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <main+0x28>)
 80001de:	f000 fc4f 	bl	8000a80 <HAL_GPIO_ReadPin>
 80001e2:	4603      	mov	r3, r0
 80001e4:	2b00      	cmp	r3, #0
 80001e6:	d0f5      	beq.n	80001d4 <main+0xc>
			StartSOS();
 80001e8:	f000 f838 	bl	800025c <StartSOS>
		HAL_Delay(30);			// Let switch stabilize
 80001ec:	e7f2      	b.n	80001d4 <main+0xc>
 80001ee:	bf00      	nop
 80001f0:	40020000 	.word	0x40020000

080001f4 <InitGPIO>:
		}
	}
}

void InitGPIO(void)
{
 80001f4:	b580      	push	{r7, lr}
 80001f6:	b08c      	sub	sp, #48	; 0x30
 80001f8:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80001fa:	2300      	movs	r3, #0
 80001fc:	607b      	str	r3, [r7, #4]
 80001fe:	4b15      	ldr	r3, [pc, #84]	; (8000254 <InitGPIO+0x60>)
 8000200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000202:	4a14      	ldr	r2, [pc, #80]	; (8000254 <InitGPIO+0x60>)
 8000204:	f043 0301 	orr.w	r3, r3, #1
 8000208:	6313      	str	r3, [r2, #48]	; 0x30
 800020a:	4b12      	ldr	r3, [pc, #72]	; (8000254 <InitGPIO+0x60>)
 800020c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800020e:	f003 0301 	and.w	r3, r3, #1
 8000212:	607b      	str	r3, [r7, #4]
 8000214:	687b      	ldr	r3, [r7, #4]

	GPIO_InitTypeDef GPIO_In, GPIO_Out;

	// Configure PA0
	GPIO_In.Pin = GPIO_PIN_0;
 8000216:	2301      	movs	r3, #1
 8000218:	61fb      	str	r3, [r7, #28]
	GPIO_In.Mode = GPIO_MODE_INPUT;
 800021a:	2300      	movs	r3, #0
 800021c:	623b      	str	r3, [r7, #32]
	GPIO_In.Pull = GPIO_PULLDOWN;
 800021e:	2302      	movs	r3, #2
 8000220:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_In.Speed = GPIO_SPEED_FAST;
 8000222:	2302      	movs	r3, #2
 8000224:	62bb      	str	r3, [r7, #40]	; 0x28

	// Configure PA9
	GPIO_Out.Pin = GPIO_PIN_9;
 8000226:	f44f 7300 	mov.w	r3, #512	; 0x200
 800022a:	60bb      	str	r3, [r7, #8]
	GPIO_Out.Mode = GPIO_MODE_OUTPUT_PP;
 800022c:	2301      	movs	r3, #1
 800022e:	60fb      	str	r3, [r7, #12]
	GPIO_Out.Pull = GPIO_NOPULL;
 8000230:	2300      	movs	r3, #0
 8000232:	613b      	str	r3, [r7, #16]

	HAL_GPIO_Init(GPIOA, &GPIO_In);
 8000234:	f107 031c 	add.w	r3, r7, #28
 8000238:	4619      	mov	r1, r3
 800023a:	4807      	ldr	r0, [pc, #28]	; (8000258 <InitGPIO+0x64>)
 800023c:	f000 fa86 	bl	800074c <HAL_GPIO_Init>
	HAL_GPIO_Init(GPIOA, &GPIO_Out);
 8000240:	f107 0308 	add.w	r3, r7, #8
 8000244:	4619      	mov	r1, r3
 8000246:	4804      	ldr	r0, [pc, #16]	; (8000258 <InitGPIO+0x64>)
 8000248:	f000 fa80 	bl	800074c <HAL_GPIO_Init>
}
 800024c:	bf00      	nop
 800024e:	3730      	adds	r7, #48	; 0x30
 8000250:	46bd      	mov	sp, r7
 8000252:	bd80      	pop	{r7, pc}
 8000254:	40023800 	.word	0x40023800
 8000258:	40020000 	.word	0x40020000

0800025c <StartSOS>:

void StartSOS(void)
{
 800025c:	b580      	push	{r7, lr}
 800025e:	af00      	add	r7, sp, #0
	while (1) {
		BlinkShort();
 8000260:	f000 f81c 	bl	800029c <BlinkShort>
		HAL_Delay(200);
 8000264:	20c8      	movs	r0, #200	; 0xc8
 8000266:	f000 f969 	bl	800053c <HAL_Delay>
		BlinkLong();
 800026a:	f000 f83b 	bl	80002e4 <BlinkLong>
		HAL_Delay(200);
 800026e:	20c8      	movs	r0, #200	; 0xc8
 8000270:	f000 f964 	bl	800053c <HAL_Delay>
		BlinkShort();
 8000274:	f000 f812 	bl	800029c <BlinkShort>
		HAL_Delay(1000);
 8000278:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800027c:	f000 f95e 	bl	800053c <HAL_Delay>
		if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)) break;
 8000280:	2101      	movs	r1, #1
 8000282:	4805      	ldr	r0, [pc, #20]	; (8000298 <StartSOS+0x3c>)
 8000284:	f000 fbfc 	bl	8000a80 <HAL_GPIO_ReadPin>
 8000288:	4603      	mov	r3, r0
 800028a:	2b00      	cmp	r3, #0
 800028c:	d100      	bne.n	8000290 <StartSOS+0x34>
		BlinkShort();
 800028e:	e7e7      	b.n	8000260 <StartSOS+0x4>
		if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)) break;
 8000290:	bf00      	nop
	}
}
 8000292:	bf00      	nop
 8000294:	bd80      	pop	{r7, pc}
 8000296:	bf00      	nop
 8000298:	40020000 	.word	0x40020000

0800029c <BlinkShort>:

void BlinkShort(void)
{
 800029c:	b580      	push	{r7, lr}
 800029e:	b082      	sub	sp, #8
 80002a0:	af00      	add	r7, sp, #0
	for (int i = 0; i < 3; i++) {
 80002a2:	2300      	movs	r3, #0
 80002a4:	607b      	str	r3, [r7, #4]
 80002a6:	e014      	b.n	80002d2 <BlinkShort+0x36>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, SET);
 80002a8:	2201      	movs	r2, #1
 80002aa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80002ae:	480c      	ldr	r0, [pc, #48]	; (80002e0 <BlinkShort+0x44>)
 80002b0:	f000 fbfe 	bl	8000ab0 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 80002b4:	2064      	movs	r0, #100	; 0x64
 80002b6:	f000 f941 	bl	800053c <HAL_Delay>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, RESET);
 80002ba:	2200      	movs	r2, #0
 80002bc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80002c0:	4807      	ldr	r0, [pc, #28]	; (80002e0 <BlinkShort+0x44>)
 80002c2:	f000 fbf5 	bl	8000ab0 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 80002c6:	2064      	movs	r0, #100	; 0x64
 80002c8:	f000 f938 	bl	800053c <HAL_Delay>
	for (int i = 0; i < 3; i++) {
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	3301      	adds	r3, #1
 80002d0:	607b      	str	r3, [r7, #4]
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	2b02      	cmp	r3, #2
 80002d6:	dde7      	ble.n	80002a8 <BlinkShort+0xc>
	}
}
 80002d8:	bf00      	nop
 80002da:	3708      	adds	r7, #8
 80002dc:	46bd      	mov	sp, r7
 80002de:	bd80      	pop	{r7, pc}
 80002e0:	40020000 	.word	0x40020000

080002e4 <BlinkLong>:

void BlinkLong(void)
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b082      	sub	sp, #8
 80002e8:	af00      	add	r7, sp, #0
	for (int i = 0; i < 3; i++) {
 80002ea:	2300      	movs	r3, #0
 80002ec:	607b      	str	r3, [r7, #4]
 80002ee:	e014      	b.n	800031a <BlinkLong+0x36>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, SET);
 80002f0:	2201      	movs	r2, #1
 80002f2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80002f6:	480c      	ldr	r0, [pc, #48]	; (8000328 <BlinkLong+0x44>)
 80002f8:	f000 fbda 	bl	8000ab0 <HAL_GPIO_WritePin>
		HAL_Delay(250);
 80002fc:	20fa      	movs	r0, #250	; 0xfa
 80002fe:	f000 f91d 	bl	800053c <HAL_Delay>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, RESET);
 8000302:	2200      	movs	r2, #0
 8000304:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000308:	4807      	ldr	r0, [pc, #28]	; (8000328 <BlinkLong+0x44>)
 800030a:	f000 fbd1 	bl	8000ab0 <HAL_GPIO_WritePin>
		HAL_Delay(250);
 800030e:	20fa      	movs	r0, #250	; 0xfa
 8000310:	f000 f914 	bl	800053c <HAL_Delay>
	for (int i = 0; i < 3; i++) {
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	3301      	adds	r3, #1
 8000318:	607b      	str	r3, [r7, #4]
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	2b02      	cmp	r3, #2
 800031e:	dde7      	ble.n	80002f0 <BlinkLong+0xc>
	}
}
 8000320:	bf00      	nop
 8000322:	3708      	adds	r7, #8
 8000324:	46bd      	mov	sp, r7
 8000326:	bd80      	pop	{r7, pc}
 8000328:	40020000 	.word	0x40020000

0800032c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	b082      	sub	sp, #8
 8000330:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000332:	2300      	movs	r3, #0
 8000334:	607b      	str	r3, [r7, #4]
 8000336:	4b10      	ldr	r3, [pc, #64]	; (8000378 <HAL_MspInit+0x4c>)
 8000338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800033a:	4a0f      	ldr	r2, [pc, #60]	; (8000378 <HAL_MspInit+0x4c>)
 800033c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000340:	6453      	str	r3, [r2, #68]	; 0x44
 8000342:	4b0d      	ldr	r3, [pc, #52]	; (8000378 <HAL_MspInit+0x4c>)
 8000344:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000346:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800034a:	607b      	str	r3, [r7, #4]
 800034c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800034e:	2300      	movs	r3, #0
 8000350:	603b      	str	r3, [r7, #0]
 8000352:	4b09      	ldr	r3, [pc, #36]	; (8000378 <HAL_MspInit+0x4c>)
 8000354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000356:	4a08      	ldr	r2, [pc, #32]	; (8000378 <HAL_MspInit+0x4c>)
 8000358:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800035c:	6413      	str	r3, [r2, #64]	; 0x40
 800035e:	4b06      	ldr	r3, [pc, #24]	; (8000378 <HAL_MspInit+0x4c>)
 8000360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000362:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000366:	603b      	str	r3, [r7, #0]
 8000368:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800036a:	2007      	movs	r0, #7
 800036c:	f000 f9ba 	bl	80006e4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000370:	bf00      	nop
 8000372:	3708      	adds	r7, #8
 8000374:	46bd      	mov	sp, r7
 8000376:	bd80      	pop	{r7, pc}
 8000378:	40023800 	.word	0x40023800

0800037c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800037c:	b480      	push	{r7}
 800037e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000380:	bf00      	nop
 8000382:	46bd      	mov	sp, r7
 8000384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000388:	4770      	bx	lr

0800038a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800038a:	b480      	push	{r7}
 800038c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800038e:	e7fe      	b.n	800038e <HardFault_Handler+0x4>

08000390 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000390:	b480      	push	{r7}
 8000392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000394:	e7fe      	b.n	8000394 <MemManage_Handler+0x4>

08000396 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000396:	b480      	push	{r7}
 8000398:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800039a:	e7fe      	b.n	800039a <BusFault_Handler+0x4>

0800039c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800039c:	b480      	push	{r7}
 800039e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80003a0:	e7fe      	b.n	80003a0 <UsageFault_Handler+0x4>

080003a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80003a2:	b480      	push	{r7}
 80003a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80003a6:	bf00      	nop
 80003a8:	46bd      	mov	sp, r7
 80003aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ae:	4770      	bx	lr

080003b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80003b0:	b480      	push	{r7}
 80003b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80003b4:	bf00      	nop
 80003b6:	46bd      	mov	sp, r7
 80003b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003bc:	4770      	bx	lr

080003be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80003be:	b480      	push	{r7}
 80003c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80003c2:	bf00      	nop
 80003c4:	46bd      	mov	sp, r7
 80003c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ca:	4770      	bx	lr

080003cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80003d0:	f000 f894 	bl	80004fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80003d4:	bf00      	nop
 80003d6:	bd80      	pop	{r7, pc}

080003d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80003d8:	b480      	push	{r7}
 80003da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80003dc:	4b08      	ldr	r3, [pc, #32]	; (8000400 <SystemInit+0x28>)
 80003de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80003e2:	4a07      	ldr	r2, [pc, #28]	; (8000400 <SystemInit+0x28>)
 80003e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80003e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80003ec:	4b04      	ldr	r3, [pc, #16]	; (8000400 <SystemInit+0x28>)
 80003ee:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80003f2:	609a      	str	r2, [r3, #8]
#endif
}
 80003f4:	bf00      	nop
 80003f6:	46bd      	mov	sp, r7
 80003f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003fc:	4770      	bx	lr
 80003fe:	bf00      	nop
 8000400:	e000ed00 	.word	0xe000ed00

08000404 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000404:	f8df d034 	ldr.w	sp, [pc, #52]	; 800043c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000408:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800040a:	e003      	b.n	8000414 <LoopCopyDataInit>

0800040c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800040c:	4b0c      	ldr	r3, [pc, #48]	; (8000440 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800040e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000410:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000412:	3104      	adds	r1, #4

08000414 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000414:	480b      	ldr	r0, [pc, #44]	; (8000444 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000416:	4b0c      	ldr	r3, [pc, #48]	; (8000448 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000418:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800041a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800041c:	d3f6      	bcc.n	800040c <CopyDataInit>
  ldr  r2, =_sbss
 800041e:	4a0b      	ldr	r2, [pc, #44]	; (800044c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000420:	e002      	b.n	8000428 <LoopFillZerobss>

08000422 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000422:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000424:	f842 3b04 	str.w	r3, [r2], #4

08000428 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000428:	4b09      	ldr	r3, [pc, #36]	; (8000450 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800042a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800042c:	d3f9      	bcc.n	8000422 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800042e:	f7ff ffd3 	bl	80003d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000432:	f000 fb57 	bl	8000ae4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000436:	f7ff fec7 	bl	80001c8 <main>
  bx  lr    
 800043a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800043c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000440:	08000b4c 	.word	0x08000b4c
  ldr  r0, =_sdata
 8000444:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000448:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 800044c:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8000450:	2000002c 	.word	0x2000002c

08000454 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000454:	e7fe      	b.n	8000454 <ADC_IRQHandler>
	...

08000458 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800045c:	4b0e      	ldr	r3, [pc, #56]	; (8000498 <HAL_Init+0x40>)
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	4a0d      	ldr	r2, [pc, #52]	; (8000498 <HAL_Init+0x40>)
 8000462:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000466:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000468:	4b0b      	ldr	r3, [pc, #44]	; (8000498 <HAL_Init+0x40>)
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	4a0a      	ldr	r2, [pc, #40]	; (8000498 <HAL_Init+0x40>)
 800046e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000472:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000474:	4b08      	ldr	r3, [pc, #32]	; (8000498 <HAL_Init+0x40>)
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	4a07      	ldr	r2, [pc, #28]	; (8000498 <HAL_Init+0x40>)
 800047a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800047e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000480:	2003      	movs	r0, #3
 8000482:	f000 f92f 	bl	80006e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000486:	2000      	movs	r0, #0
 8000488:	f000 f808 	bl	800049c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800048c:	f7ff ff4e 	bl	800032c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000490:	2300      	movs	r3, #0
}
 8000492:	4618      	mov	r0, r3
 8000494:	bd80      	pop	{r7, pc}
 8000496:	bf00      	nop
 8000498:	40023c00 	.word	0x40023c00

0800049c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	b082      	sub	sp, #8
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80004a4:	4b12      	ldr	r3, [pc, #72]	; (80004f0 <HAL_InitTick+0x54>)
 80004a6:	681a      	ldr	r2, [r3, #0]
 80004a8:	4b12      	ldr	r3, [pc, #72]	; (80004f4 <HAL_InitTick+0x58>)
 80004aa:	781b      	ldrb	r3, [r3, #0]
 80004ac:	4619      	mov	r1, r3
 80004ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80004b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80004ba:	4618      	mov	r0, r3
 80004bc:	f000 f939 	bl	8000732 <HAL_SYSTICK_Config>
 80004c0:	4603      	mov	r3, r0
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	d001      	beq.n	80004ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80004c6:	2301      	movs	r3, #1
 80004c8:	e00e      	b.n	80004e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	2b0f      	cmp	r3, #15
 80004ce:	d80a      	bhi.n	80004e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80004d0:	2200      	movs	r2, #0
 80004d2:	6879      	ldr	r1, [r7, #4]
 80004d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80004d8:	f000 f90f 	bl	80006fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80004dc:	4a06      	ldr	r2, [pc, #24]	; (80004f8 <HAL_InitTick+0x5c>)
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80004e2:	2300      	movs	r3, #0
 80004e4:	e000      	b.n	80004e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80004e6:	2301      	movs	r3, #1
}
 80004e8:	4618      	mov	r0, r3
 80004ea:	3708      	adds	r7, #8
 80004ec:	46bd      	mov	sp, r7
 80004ee:	bd80      	pop	{r7, pc}
 80004f0:	20000000 	.word	0x20000000
 80004f4:	20000008 	.word	0x20000008
 80004f8:	20000004 	.word	0x20000004

080004fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80004fc:	b480      	push	{r7}
 80004fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000500:	4b06      	ldr	r3, [pc, #24]	; (800051c <HAL_IncTick+0x20>)
 8000502:	781b      	ldrb	r3, [r3, #0]
 8000504:	461a      	mov	r2, r3
 8000506:	4b06      	ldr	r3, [pc, #24]	; (8000520 <HAL_IncTick+0x24>)
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	4413      	add	r3, r2
 800050c:	4a04      	ldr	r2, [pc, #16]	; (8000520 <HAL_IncTick+0x24>)
 800050e:	6013      	str	r3, [r2, #0]
}
 8000510:	bf00      	nop
 8000512:	46bd      	mov	sp, r7
 8000514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop
 800051c:	20000008 	.word	0x20000008
 8000520:	20000028 	.word	0x20000028

08000524 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000524:	b480      	push	{r7}
 8000526:	af00      	add	r7, sp, #0
  return uwTick;
 8000528:	4b03      	ldr	r3, [pc, #12]	; (8000538 <HAL_GetTick+0x14>)
 800052a:	681b      	ldr	r3, [r3, #0]
}
 800052c:	4618      	mov	r0, r3
 800052e:	46bd      	mov	sp, r7
 8000530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop
 8000538:	20000028 	.word	0x20000028

0800053c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b084      	sub	sp, #16
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000544:	f7ff ffee 	bl	8000524 <HAL_GetTick>
 8000548:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800054e:	68fb      	ldr	r3, [r7, #12]
 8000550:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000554:	d005      	beq.n	8000562 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000556:	4b09      	ldr	r3, [pc, #36]	; (800057c <HAL_Delay+0x40>)
 8000558:	781b      	ldrb	r3, [r3, #0]
 800055a:	461a      	mov	r2, r3
 800055c:	68fb      	ldr	r3, [r7, #12]
 800055e:	4413      	add	r3, r2
 8000560:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000562:	bf00      	nop
 8000564:	f7ff ffde 	bl	8000524 <HAL_GetTick>
 8000568:	4602      	mov	r2, r0
 800056a:	68bb      	ldr	r3, [r7, #8]
 800056c:	1ad3      	subs	r3, r2, r3
 800056e:	68fa      	ldr	r2, [r7, #12]
 8000570:	429a      	cmp	r2, r3
 8000572:	d8f7      	bhi.n	8000564 <HAL_Delay+0x28>
  {
  }
}
 8000574:	bf00      	nop
 8000576:	3710      	adds	r7, #16
 8000578:	46bd      	mov	sp, r7
 800057a:	bd80      	pop	{r7, pc}
 800057c:	20000008 	.word	0x20000008

08000580 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000580:	b480      	push	{r7}
 8000582:	b085      	sub	sp, #20
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	f003 0307 	and.w	r3, r3, #7
 800058e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000590:	4b0c      	ldr	r3, [pc, #48]	; (80005c4 <__NVIC_SetPriorityGrouping+0x44>)
 8000592:	68db      	ldr	r3, [r3, #12]
 8000594:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000596:	68ba      	ldr	r2, [r7, #8]
 8000598:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800059c:	4013      	ands	r3, r2
 800059e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80005a0:	68fb      	ldr	r3, [r7, #12]
 80005a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80005a4:	68bb      	ldr	r3, [r7, #8]
 80005a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80005a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80005ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80005b2:	4a04      	ldr	r2, [pc, #16]	; (80005c4 <__NVIC_SetPriorityGrouping+0x44>)
 80005b4:	68bb      	ldr	r3, [r7, #8]
 80005b6:	60d3      	str	r3, [r2, #12]
}
 80005b8:	bf00      	nop
 80005ba:	3714      	adds	r7, #20
 80005bc:	46bd      	mov	sp, r7
 80005be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c2:	4770      	bx	lr
 80005c4:	e000ed00 	.word	0xe000ed00

080005c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005cc:	4b04      	ldr	r3, [pc, #16]	; (80005e0 <__NVIC_GetPriorityGrouping+0x18>)
 80005ce:	68db      	ldr	r3, [r3, #12]
 80005d0:	0a1b      	lsrs	r3, r3, #8
 80005d2:	f003 0307 	and.w	r3, r3, #7
}
 80005d6:	4618      	mov	r0, r3
 80005d8:	46bd      	mov	sp, r7
 80005da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005de:	4770      	bx	lr
 80005e0:	e000ed00 	.word	0xe000ed00

080005e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80005e4:	b480      	push	{r7}
 80005e6:	b083      	sub	sp, #12
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	4603      	mov	r3, r0
 80005ec:	6039      	str	r1, [r7, #0]
 80005ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	db0a      	blt.n	800060e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005f8:	683b      	ldr	r3, [r7, #0]
 80005fa:	b2da      	uxtb	r2, r3
 80005fc:	490c      	ldr	r1, [pc, #48]	; (8000630 <__NVIC_SetPriority+0x4c>)
 80005fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000602:	0112      	lsls	r2, r2, #4
 8000604:	b2d2      	uxtb	r2, r2
 8000606:	440b      	add	r3, r1
 8000608:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800060c:	e00a      	b.n	8000624 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800060e:	683b      	ldr	r3, [r7, #0]
 8000610:	b2da      	uxtb	r2, r3
 8000612:	4908      	ldr	r1, [pc, #32]	; (8000634 <__NVIC_SetPriority+0x50>)
 8000614:	79fb      	ldrb	r3, [r7, #7]
 8000616:	f003 030f 	and.w	r3, r3, #15
 800061a:	3b04      	subs	r3, #4
 800061c:	0112      	lsls	r2, r2, #4
 800061e:	b2d2      	uxtb	r2, r2
 8000620:	440b      	add	r3, r1
 8000622:	761a      	strb	r2, [r3, #24]
}
 8000624:	bf00      	nop
 8000626:	370c      	adds	r7, #12
 8000628:	46bd      	mov	sp, r7
 800062a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062e:	4770      	bx	lr
 8000630:	e000e100 	.word	0xe000e100
 8000634:	e000ed00 	.word	0xe000ed00

08000638 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000638:	b480      	push	{r7}
 800063a:	b089      	sub	sp, #36	; 0x24
 800063c:	af00      	add	r7, sp, #0
 800063e:	60f8      	str	r0, [r7, #12]
 8000640:	60b9      	str	r1, [r7, #8]
 8000642:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000644:	68fb      	ldr	r3, [r7, #12]
 8000646:	f003 0307 	and.w	r3, r3, #7
 800064a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800064c:	69fb      	ldr	r3, [r7, #28]
 800064e:	f1c3 0307 	rsb	r3, r3, #7
 8000652:	2b04      	cmp	r3, #4
 8000654:	bf28      	it	cs
 8000656:	2304      	movcs	r3, #4
 8000658:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800065a:	69fb      	ldr	r3, [r7, #28]
 800065c:	3304      	adds	r3, #4
 800065e:	2b06      	cmp	r3, #6
 8000660:	d902      	bls.n	8000668 <NVIC_EncodePriority+0x30>
 8000662:	69fb      	ldr	r3, [r7, #28]
 8000664:	3b03      	subs	r3, #3
 8000666:	e000      	b.n	800066a <NVIC_EncodePriority+0x32>
 8000668:	2300      	movs	r3, #0
 800066a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800066c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000670:	69bb      	ldr	r3, [r7, #24]
 8000672:	fa02 f303 	lsl.w	r3, r2, r3
 8000676:	43da      	mvns	r2, r3
 8000678:	68bb      	ldr	r3, [r7, #8]
 800067a:	401a      	ands	r2, r3
 800067c:	697b      	ldr	r3, [r7, #20]
 800067e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000680:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000684:	697b      	ldr	r3, [r7, #20]
 8000686:	fa01 f303 	lsl.w	r3, r1, r3
 800068a:	43d9      	mvns	r1, r3
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000690:	4313      	orrs	r3, r2
         );
}
 8000692:	4618      	mov	r0, r3
 8000694:	3724      	adds	r7, #36	; 0x24
 8000696:	46bd      	mov	sp, r7
 8000698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069c:	4770      	bx	lr
	...

080006a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b082      	sub	sp, #8
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	3b01      	subs	r3, #1
 80006ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80006b0:	d301      	bcc.n	80006b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80006b2:	2301      	movs	r3, #1
 80006b4:	e00f      	b.n	80006d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006b6:	4a0a      	ldr	r2, [pc, #40]	; (80006e0 <SysTick_Config+0x40>)
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	3b01      	subs	r3, #1
 80006bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80006be:	210f      	movs	r1, #15
 80006c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80006c4:	f7ff ff8e 	bl	80005e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006c8:	4b05      	ldr	r3, [pc, #20]	; (80006e0 <SysTick_Config+0x40>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006ce:	4b04      	ldr	r3, [pc, #16]	; (80006e0 <SysTick_Config+0x40>)
 80006d0:	2207      	movs	r2, #7
 80006d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80006d4:	2300      	movs	r3, #0
}
 80006d6:	4618      	mov	r0, r3
 80006d8:	3708      	adds	r7, #8
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	e000e010 	.word	0xe000e010

080006e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80006ec:	6878      	ldr	r0, [r7, #4]
 80006ee:	f7ff ff47 	bl	8000580 <__NVIC_SetPriorityGrouping>
}
 80006f2:	bf00      	nop
 80006f4:	3708      	adds	r7, #8
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}

080006fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80006fa:	b580      	push	{r7, lr}
 80006fc:	b086      	sub	sp, #24
 80006fe:	af00      	add	r7, sp, #0
 8000700:	4603      	mov	r3, r0
 8000702:	60b9      	str	r1, [r7, #8]
 8000704:	607a      	str	r2, [r7, #4]
 8000706:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000708:	2300      	movs	r3, #0
 800070a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800070c:	f7ff ff5c 	bl	80005c8 <__NVIC_GetPriorityGrouping>
 8000710:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000712:	687a      	ldr	r2, [r7, #4]
 8000714:	68b9      	ldr	r1, [r7, #8]
 8000716:	6978      	ldr	r0, [r7, #20]
 8000718:	f7ff ff8e 	bl	8000638 <NVIC_EncodePriority>
 800071c:	4602      	mov	r2, r0
 800071e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000722:	4611      	mov	r1, r2
 8000724:	4618      	mov	r0, r3
 8000726:	f7ff ff5d 	bl	80005e4 <__NVIC_SetPriority>
}
 800072a:	bf00      	nop
 800072c:	3718      	adds	r7, #24
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}

08000732 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000732:	b580      	push	{r7, lr}
 8000734:	b082      	sub	sp, #8
 8000736:	af00      	add	r7, sp, #0
 8000738:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800073a:	6878      	ldr	r0, [r7, #4]
 800073c:	f7ff ffb0 	bl	80006a0 <SysTick_Config>
 8000740:	4603      	mov	r3, r0
}
 8000742:	4618      	mov	r0, r3
 8000744:	3708      	adds	r7, #8
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
	...

0800074c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800074c:	b480      	push	{r7}
 800074e:	b089      	sub	sp, #36	; 0x24
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
 8000754:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000756:	2300      	movs	r3, #0
 8000758:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800075a:	2300      	movs	r3, #0
 800075c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800075e:	2300      	movs	r3, #0
 8000760:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000762:	2300      	movs	r3, #0
 8000764:	61fb      	str	r3, [r7, #28]
 8000766:	e16b      	b.n	8000a40 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000768:	2201      	movs	r2, #1
 800076a:	69fb      	ldr	r3, [r7, #28]
 800076c:	fa02 f303 	lsl.w	r3, r2, r3
 8000770:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000772:	683b      	ldr	r3, [r7, #0]
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	697a      	ldr	r2, [r7, #20]
 8000778:	4013      	ands	r3, r2
 800077a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800077c:	693a      	ldr	r2, [r7, #16]
 800077e:	697b      	ldr	r3, [r7, #20]
 8000780:	429a      	cmp	r2, r3
 8000782:	f040 815a 	bne.w	8000a3a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000786:	683b      	ldr	r3, [r7, #0]
 8000788:	685b      	ldr	r3, [r3, #4]
 800078a:	2b01      	cmp	r3, #1
 800078c:	d00b      	beq.n	80007a6 <HAL_GPIO_Init+0x5a>
 800078e:	683b      	ldr	r3, [r7, #0]
 8000790:	685b      	ldr	r3, [r3, #4]
 8000792:	2b02      	cmp	r3, #2
 8000794:	d007      	beq.n	80007a6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000796:	683b      	ldr	r3, [r7, #0]
 8000798:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800079a:	2b11      	cmp	r3, #17
 800079c:	d003      	beq.n	80007a6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800079e:	683b      	ldr	r3, [r7, #0]
 80007a0:	685b      	ldr	r3, [r3, #4]
 80007a2:	2b12      	cmp	r3, #18
 80007a4:	d130      	bne.n	8000808 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	689b      	ldr	r3, [r3, #8]
 80007aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80007ac:	69fb      	ldr	r3, [r7, #28]
 80007ae:	005b      	lsls	r3, r3, #1
 80007b0:	2203      	movs	r2, #3
 80007b2:	fa02 f303 	lsl.w	r3, r2, r3
 80007b6:	43db      	mvns	r3, r3
 80007b8:	69ba      	ldr	r2, [r7, #24]
 80007ba:	4013      	ands	r3, r2
 80007bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80007be:	683b      	ldr	r3, [r7, #0]
 80007c0:	68da      	ldr	r2, [r3, #12]
 80007c2:	69fb      	ldr	r3, [r7, #28]
 80007c4:	005b      	lsls	r3, r3, #1
 80007c6:	fa02 f303 	lsl.w	r3, r2, r3
 80007ca:	69ba      	ldr	r2, [r7, #24]
 80007cc:	4313      	orrs	r3, r2
 80007ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	69ba      	ldr	r2, [r7, #24]
 80007d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	685b      	ldr	r3, [r3, #4]
 80007da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80007dc:	2201      	movs	r2, #1
 80007de:	69fb      	ldr	r3, [r7, #28]
 80007e0:	fa02 f303 	lsl.w	r3, r2, r3
 80007e4:	43db      	mvns	r3, r3
 80007e6:	69ba      	ldr	r2, [r7, #24]
 80007e8:	4013      	ands	r3, r2
 80007ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80007ec:	683b      	ldr	r3, [r7, #0]
 80007ee:	685b      	ldr	r3, [r3, #4]
 80007f0:	091b      	lsrs	r3, r3, #4
 80007f2:	f003 0201 	and.w	r2, r3, #1
 80007f6:	69fb      	ldr	r3, [r7, #28]
 80007f8:	fa02 f303 	lsl.w	r3, r2, r3
 80007fc:	69ba      	ldr	r2, [r7, #24]
 80007fe:	4313      	orrs	r3, r2
 8000800:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	69ba      	ldr	r2, [r7, #24]
 8000806:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	68db      	ldr	r3, [r3, #12]
 800080c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800080e:	69fb      	ldr	r3, [r7, #28]
 8000810:	005b      	lsls	r3, r3, #1
 8000812:	2203      	movs	r2, #3
 8000814:	fa02 f303 	lsl.w	r3, r2, r3
 8000818:	43db      	mvns	r3, r3
 800081a:	69ba      	ldr	r2, [r7, #24]
 800081c:	4013      	ands	r3, r2
 800081e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000820:	683b      	ldr	r3, [r7, #0]
 8000822:	689a      	ldr	r2, [r3, #8]
 8000824:	69fb      	ldr	r3, [r7, #28]
 8000826:	005b      	lsls	r3, r3, #1
 8000828:	fa02 f303 	lsl.w	r3, r2, r3
 800082c:	69ba      	ldr	r2, [r7, #24]
 800082e:	4313      	orrs	r3, r2
 8000830:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	69ba      	ldr	r2, [r7, #24]
 8000836:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000838:	683b      	ldr	r3, [r7, #0]
 800083a:	685b      	ldr	r3, [r3, #4]
 800083c:	2b02      	cmp	r3, #2
 800083e:	d003      	beq.n	8000848 <HAL_GPIO_Init+0xfc>
 8000840:	683b      	ldr	r3, [r7, #0]
 8000842:	685b      	ldr	r3, [r3, #4]
 8000844:	2b12      	cmp	r3, #18
 8000846:	d123      	bne.n	8000890 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000848:	69fb      	ldr	r3, [r7, #28]
 800084a:	08da      	lsrs	r2, r3, #3
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	3208      	adds	r2, #8
 8000850:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000854:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000856:	69fb      	ldr	r3, [r7, #28]
 8000858:	f003 0307 	and.w	r3, r3, #7
 800085c:	009b      	lsls	r3, r3, #2
 800085e:	220f      	movs	r2, #15
 8000860:	fa02 f303 	lsl.w	r3, r2, r3
 8000864:	43db      	mvns	r3, r3
 8000866:	69ba      	ldr	r2, [r7, #24]
 8000868:	4013      	ands	r3, r2
 800086a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800086c:	683b      	ldr	r3, [r7, #0]
 800086e:	691a      	ldr	r2, [r3, #16]
 8000870:	69fb      	ldr	r3, [r7, #28]
 8000872:	f003 0307 	and.w	r3, r3, #7
 8000876:	009b      	lsls	r3, r3, #2
 8000878:	fa02 f303 	lsl.w	r3, r2, r3
 800087c:	69ba      	ldr	r2, [r7, #24]
 800087e:	4313      	orrs	r3, r2
 8000880:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000882:	69fb      	ldr	r3, [r7, #28]
 8000884:	08da      	lsrs	r2, r3, #3
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	3208      	adds	r2, #8
 800088a:	69b9      	ldr	r1, [r7, #24]
 800088c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000896:	69fb      	ldr	r3, [r7, #28]
 8000898:	005b      	lsls	r3, r3, #1
 800089a:	2203      	movs	r2, #3
 800089c:	fa02 f303 	lsl.w	r3, r2, r3
 80008a0:	43db      	mvns	r3, r3
 80008a2:	69ba      	ldr	r2, [r7, #24]
 80008a4:	4013      	ands	r3, r2
 80008a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80008a8:	683b      	ldr	r3, [r7, #0]
 80008aa:	685b      	ldr	r3, [r3, #4]
 80008ac:	f003 0203 	and.w	r2, r3, #3
 80008b0:	69fb      	ldr	r3, [r7, #28]
 80008b2:	005b      	lsls	r3, r3, #1
 80008b4:	fa02 f303 	lsl.w	r3, r2, r3
 80008b8:	69ba      	ldr	r2, [r7, #24]
 80008ba:	4313      	orrs	r3, r2
 80008bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	69ba      	ldr	r2, [r7, #24]
 80008c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80008c4:	683b      	ldr	r3, [r7, #0]
 80008c6:	685b      	ldr	r3, [r3, #4]
 80008c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	f000 80b4 	beq.w	8000a3a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008d2:	2300      	movs	r3, #0
 80008d4:	60fb      	str	r3, [r7, #12]
 80008d6:	4b5f      	ldr	r3, [pc, #380]	; (8000a54 <HAL_GPIO_Init+0x308>)
 80008d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008da:	4a5e      	ldr	r2, [pc, #376]	; (8000a54 <HAL_GPIO_Init+0x308>)
 80008dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008e0:	6453      	str	r3, [r2, #68]	; 0x44
 80008e2:	4b5c      	ldr	r3, [pc, #368]	; (8000a54 <HAL_GPIO_Init+0x308>)
 80008e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008ea:	60fb      	str	r3, [r7, #12]
 80008ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80008ee:	4a5a      	ldr	r2, [pc, #360]	; (8000a58 <HAL_GPIO_Init+0x30c>)
 80008f0:	69fb      	ldr	r3, [r7, #28]
 80008f2:	089b      	lsrs	r3, r3, #2
 80008f4:	3302      	adds	r3, #2
 80008f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80008fc:	69fb      	ldr	r3, [r7, #28]
 80008fe:	f003 0303 	and.w	r3, r3, #3
 8000902:	009b      	lsls	r3, r3, #2
 8000904:	220f      	movs	r2, #15
 8000906:	fa02 f303 	lsl.w	r3, r2, r3
 800090a:	43db      	mvns	r3, r3
 800090c:	69ba      	ldr	r2, [r7, #24]
 800090e:	4013      	ands	r3, r2
 8000910:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	4a51      	ldr	r2, [pc, #324]	; (8000a5c <HAL_GPIO_Init+0x310>)
 8000916:	4293      	cmp	r3, r2
 8000918:	d02b      	beq.n	8000972 <HAL_GPIO_Init+0x226>
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	4a50      	ldr	r2, [pc, #320]	; (8000a60 <HAL_GPIO_Init+0x314>)
 800091e:	4293      	cmp	r3, r2
 8000920:	d025      	beq.n	800096e <HAL_GPIO_Init+0x222>
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	4a4f      	ldr	r2, [pc, #316]	; (8000a64 <HAL_GPIO_Init+0x318>)
 8000926:	4293      	cmp	r3, r2
 8000928:	d01f      	beq.n	800096a <HAL_GPIO_Init+0x21e>
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	4a4e      	ldr	r2, [pc, #312]	; (8000a68 <HAL_GPIO_Init+0x31c>)
 800092e:	4293      	cmp	r3, r2
 8000930:	d019      	beq.n	8000966 <HAL_GPIO_Init+0x21a>
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	4a4d      	ldr	r2, [pc, #308]	; (8000a6c <HAL_GPIO_Init+0x320>)
 8000936:	4293      	cmp	r3, r2
 8000938:	d013      	beq.n	8000962 <HAL_GPIO_Init+0x216>
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	4a4c      	ldr	r2, [pc, #304]	; (8000a70 <HAL_GPIO_Init+0x324>)
 800093e:	4293      	cmp	r3, r2
 8000940:	d00d      	beq.n	800095e <HAL_GPIO_Init+0x212>
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	4a4b      	ldr	r2, [pc, #300]	; (8000a74 <HAL_GPIO_Init+0x328>)
 8000946:	4293      	cmp	r3, r2
 8000948:	d007      	beq.n	800095a <HAL_GPIO_Init+0x20e>
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	4a4a      	ldr	r2, [pc, #296]	; (8000a78 <HAL_GPIO_Init+0x32c>)
 800094e:	4293      	cmp	r3, r2
 8000950:	d101      	bne.n	8000956 <HAL_GPIO_Init+0x20a>
 8000952:	2307      	movs	r3, #7
 8000954:	e00e      	b.n	8000974 <HAL_GPIO_Init+0x228>
 8000956:	2308      	movs	r3, #8
 8000958:	e00c      	b.n	8000974 <HAL_GPIO_Init+0x228>
 800095a:	2306      	movs	r3, #6
 800095c:	e00a      	b.n	8000974 <HAL_GPIO_Init+0x228>
 800095e:	2305      	movs	r3, #5
 8000960:	e008      	b.n	8000974 <HAL_GPIO_Init+0x228>
 8000962:	2304      	movs	r3, #4
 8000964:	e006      	b.n	8000974 <HAL_GPIO_Init+0x228>
 8000966:	2303      	movs	r3, #3
 8000968:	e004      	b.n	8000974 <HAL_GPIO_Init+0x228>
 800096a:	2302      	movs	r3, #2
 800096c:	e002      	b.n	8000974 <HAL_GPIO_Init+0x228>
 800096e:	2301      	movs	r3, #1
 8000970:	e000      	b.n	8000974 <HAL_GPIO_Init+0x228>
 8000972:	2300      	movs	r3, #0
 8000974:	69fa      	ldr	r2, [r7, #28]
 8000976:	f002 0203 	and.w	r2, r2, #3
 800097a:	0092      	lsls	r2, r2, #2
 800097c:	4093      	lsls	r3, r2
 800097e:	69ba      	ldr	r2, [r7, #24]
 8000980:	4313      	orrs	r3, r2
 8000982:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000984:	4934      	ldr	r1, [pc, #208]	; (8000a58 <HAL_GPIO_Init+0x30c>)
 8000986:	69fb      	ldr	r3, [r7, #28]
 8000988:	089b      	lsrs	r3, r3, #2
 800098a:	3302      	adds	r3, #2
 800098c:	69ba      	ldr	r2, [r7, #24]
 800098e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000992:	4b3a      	ldr	r3, [pc, #232]	; (8000a7c <HAL_GPIO_Init+0x330>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000998:	693b      	ldr	r3, [r7, #16]
 800099a:	43db      	mvns	r3, r3
 800099c:	69ba      	ldr	r2, [r7, #24]
 800099e:	4013      	ands	r3, r2
 80009a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80009a2:	683b      	ldr	r3, [r7, #0]
 80009a4:	685b      	ldr	r3, [r3, #4]
 80009a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d003      	beq.n	80009b6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80009ae:	69ba      	ldr	r2, [r7, #24]
 80009b0:	693b      	ldr	r3, [r7, #16]
 80009b2:	4313      	orrs	r3, r2
 80009b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80009b6:	4a31      	ldr	r2, [pc, #196]	; (8000a7c <HAL_GPIO_Init+0x330>)
 80009b8:	69bb      	ldr	r3, [r7, #24]
 80009ba:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80009bc:	4b2f      	ldr	r3, [pc, #188]	; (8000a7c <HAL_GPIO_Init+0x330>)
 80009be:	685b      	ldr	r3, [r3, #4]
 80009c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80009c2:	693b      	ldr	r3, [r7, #16]
 80009c4:	43db      	mvns	r3, r3
 80009c6:	69ba      	ldr	r2, [r7, #24]
 80009c8:	4013      	ands	r3, r2
 80009ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80009cc:	683b      	ldr	r3, [r7, #0]
 80009ce:	685b      	ldr	r3, [r3, #4]
 80009d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d003      	beq.n	80009e0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80009d8:	69ba      	ldr	r2, [r7, #24]
 80009da:	693b      	ldr	r3, [r7, #16]
 80009dc:	4313      	orrs	r3, r2
 80009de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80009e0:	4a26      	ldr	r2, [pc, #152]	; (8000a7c <HAL_GPIO_Init+0x330>)
 80009e2:	69bb      	ldr	r3, [r7, #24]
 80009e4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80009e6:	4b25      	ldr	r3, [pc, #148]	; (8000a7c <HAL_GPIO_Init+0x330>)
 80009e8:	689b      	ldr	r3, [r3, #8]
 80009ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80009ec:	693b      	ldr	r3, [r7, #16]
 80009ee:	43db      	mvns	r3, r3
 80009f0:	69ba      	ldr	r2, [r7, #24]
 80009f2:	4013      	ands	r3, r2
 80009f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80009f6:	683b      	ldr	r3, [r7, #0]
 80009f8:	685b      	ldr	r3, [r3, #4]
 80009fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d003      	beq.n	8000a0a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000a02:	69ba      	ldr	r2, [r7, #24]
 8000a04:	693b      	ldr	r3, [r7, #16]
 8000a06:	4313      	orrs	r3, r2
 8000a08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000a0a:	4a1c      	ldr	r2, [pc, #112]	; (8000a7c <HAL_GPIO_Init+0x330>)
 8000a0c:	69bb      	ldr	r3, [r7, #24]
 8000a0e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000a10:	4b1a      	ldr	r3, [pc, #104]	; (8000a7c <HAL_GPIO_Init+0x330>)
 8000a12:	68db      	ldr	r3, [r3, #12]
 8000a14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a16:	693b      	ldr	r3, [r7, #16]
 8000a18:	43db      	mvns	r3, r3
 8000a1a:	69ba      	ldr	r2, [r7, #24]
 8000a1c:	4013      	ands	r3, r2
 8000a1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a20:	683b      	ldr	r3, [r7, #0]
 8000a22:	685b      	ldr	r3, [r3, #4]
 8000a24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d003      	beq.n	8000a34 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000a2c:	69ba      	ldr	r2, [r7, #24]
 8000a2e:	693b      	ldr	r3, [r7, #16]
 8000a30:	4313      	orrs	r3, r2
 8000a32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000a34:	4a11      	ldr	r2, [pc, #68]	; (8000a7c <HAL_GPIO_Init+0x330>)
 8000a36:	69bb      	ldr	r3, [r7, #24]
 8000a38:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000a3a:	69fb      	ldr	r3, [r7, #28]
 8000a3c:	3301      	adds	r3, #1
 8000a3e:	61fb      	str	r3, [r7, #28]
 8000a40:	69fb      	ldr	r3, [r7, #28]
 8000a42:	2b0f      	cmp	r3, #15
 8000a44:	f67f ae90 	bls.w	8000768 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000a48:	bf00      	nop
 8000a4a:	3724      	adds	r7, #36	; 0x24
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a52:	4770      	bx	lr
 8000a54:	40023800 	.word	0x40023800
 8000a58:	40013800 	.word	0x40013800
 8000a5c:	40020000 	.word	0x40020000
 8000a60:	40020400 	.word	0x40020400
 8000a64:	40020800 	.word	0x40020800
 8000a68:	40020c00 	.word	0x40020c00
 8000a6c:	40021000 	.word	0x40021000
 8000a70:	40021400 	.word	0x40021400
 8000a74:	40021800 	.word	0x40021800
 8000a78:	40021c00 	.word	0x40021c00
 8000a7c:	40013c00 	.word	0x40013c00

08000a80 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000a80:	b480      	push	{r7}
 8000a82:	b085      	sub	sp, #20
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
 8000a88:	460b      	mov	r3, r1
 8000a8a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	691a      	ldr	r2, [r3, #16]
 8000a90:	887b      	ldrh	r3, [r7, #2]
 8000a92:	4013      	ands	r3, r2
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d002      	beq.n	8000a9e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000a98:	2301      	movs	r3, #1
 8000a9a:	73fb      	strb	r3, [r7, #15]
 8000a9c:	e001      	b.n	8000aa2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000aa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	3714      	adds	r7, #20
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aae:	4770      	bx	lr

08000ab0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	b083      	sub	sp, #12
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
 8000ab8:	460b      	mov	r3, r1
 8000aba:	807b      	strh	r3, [r7, #2]
 8000abc:	4613      	mov	r3, r2
 8000abe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000ac0:	787b      	ldrb	r3, [r7, #1]
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d003      	beq.n	8000ace <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000ac6:	887a      	ldrh	r2, [r7, #2]
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000acc:	e003      	b.n	8000ad6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000ace:	887b      	ldrh	r3, [r7, #2]
 8000ad0:	041a      	lsls	r2, r3, #16
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	619a      	str	r2, [r3, #24]
}
 8000ad6:	bf00      	nop
 8000ad8:	370c      	adds	r7, #12
 8000ada:	46bd      	mov	sp, r7
 8000adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae0:	4770      	bx	lr
	...

08000ae4 <__libc_init_array>:
 8000ae4:	b570      	push	{r4, r5, r6, lr}
 8000ae6:	4e0d      	ldr	r6, [pc, #52]	; (8000b1c <__libc_init_array+0x38>)
 8000ae8:	4c0d      	ldr	r4, [pc, #52]	; (8000b20 <__libc_init_array+0x3c>)
 8000aea:	1ba4      	subs	r4, r4, r6
 8000aec:	10a4      	asrs	r4, r4, #2
 8000aee:	2500      	movs	r5, #0
 8000af0:	42a5      	cmp	r5, r4
 8000af2:	d109      	bne.n	8000b08 <__libc_init_array+0x24>
 8000af4:	4e0b      	ldr	r6, [pc, #44]	; (8000b24 <__libc_init_array+0x40>)
 8000af6:	4c0c      	ldr	r4, [pc, #48]	; (8000b28 <__libc_init_array+0x44>)
 8000af8:	f000 f818 	bl	8000b2c <_init>
 8000afc:	1ba4      	subs	r4, r4, r6
 8000afe:	10a4      	asrs	r4, r4, #2
 8000b00:	2500      	movs	r5, #0
 8000b02:	42a5      	cmp	r5, r4
 8000b04:	d105      	bne.n	8000b12 <__libc_init_array+0x2e>
 8000b06:	bd70      	pop	{r4, r5, r6, pc}
 8000b08:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000b0c:	4798      	blx	r3
 8000b0e:	3501      	adds	r5, #1
 8000b10:	e7ee      	b.n	8000af0 <__libc_init_array+0xc>
 8000b12:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000b16:	4798      	blx	r3
 8000b18:	3501      	adds	r5, #1
 8000b1a:	e7f2      	b.n	8000b02 <__libc_init_array+0x1e>
 8000b1c:	08000b44 	.word	0x08000b44
 8000b20:	08000b44 	.word	0x08000b44
 8000b24:	08000b44 	.word	0x08000b44
 8000b28:	08000b48 	.word	0x08000b48

08000b2c <_init>:
 8000b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b2e:	bf00      	nop
 8000b30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b32:	bc08      	pop	{r3}
 8000b34:	469e      	mov	lr, r3
 8000b36:	4770      	bx	lr

08000b38 <_fini>:
 8000b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b3a:	bf00      	nop
 8000b3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b3e:	bc08      	pop	{r3}
 8000b40:	469e      	mov	lr, r3
 8000b42:	4770      	bx	lr
